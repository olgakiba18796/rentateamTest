{"version":3,"sources":["src/index.js"],"names":["serverApiRequest","a","fetch","response","json","data","ok","Error","error","filter","i","map","Object","values","flat","name","message","sendAnalytics","b","navigator","sendBeacon","requestData","id","param","type","log","text","app","document","querySelector","appendChild","createTextNode","JSON","stringify","createElement"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["// Эта функция по идее должна быть импортирована,\n// но упрощено и нужно её простейшим образом реализовать\n// может вернуть массив вида (null | {v: number})[] или вернуть ошибку класса Error\n\nconst serverApiRequest = async a => {\n  /*simulate request*/\n  try {\n    const response = await fetch(`//t.syshub.ru/${a}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error);\n    }\n    return data\n      .filter(i => i !== null)\n      .map(i => Object.values(i))\n      .flat();\n  } catch (e) {\n    return `${e.name}: ${e.message}`;\n  }\n};\n\n// Можно выполнить по аналогии с serverApiRequest(), а можно лучше, см. подсказку ниже\n// Не должно прерывать выполнение приложения и ломать его, если что-то пошло не так\n\nconst sendAnalytics = (a, b) => {\n  /*sendBeacon maybe*/\n  const response = navigator.sendBeacon(a, b);\n  return response ? \"Successfully queued!\" : \"Failure.\";\n};\n/* Нужно:\n    1 Сделать функцию рабочей в принципе не меняя логики но доступно ES8+\n    2 Общая логика: запрос, если успех, то отправка данных в аналитику, обработка данных и их возврат\n    3 Подсветить места, где ТЗ недостаточно\n    4 Подсветить места, вероятно проблемные\n*/\nconst requestData = async ({ id, param }) => {\n  // should return [null, {v: 1}, {v: 4}, null] or Error (may return array (null | {v: number})[])\n  const response = await serverApiRequest(`query/data/${id}/param/${param}`);\n  sendAnalytics(\"/requestDone\", {\n    type: \"data\",\n    id,\n    param\n  });\n\n  return response;\n  // after complete request if *not* Error call\n\n  // магия, описать\n  // return [1, 4]\n};\n\n// app proto\n// START DO NOT EDIT app\n(async () => {\n  const log = text => {\n    const app = document.querySelector(\"#app\");\n    app.appendChild(document.createTextNode(JSON.stringify(text, null, 2)));\n    app.appendChild(document.createElement(\"br\"));\n  };\n\n  log(await requestData({ id: 1, param: \"any\" }));\n  log(await requestData({ id: 4, param: \"string\" }));\n  log(await requestData({ id: 4, param: 404 }));\n})();\n// END DO NOT EDIT app\n"]}